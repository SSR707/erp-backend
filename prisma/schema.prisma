generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  full_name         String?
  username           String         @unique
  password          String
  role              UserRole   
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  user_id           String         @id @default(uuid())
  attendance        Attendance[]
  group_members     GroupMembers[]
  gradedSubmissions Submissions[]  @relation("GraderSubmissions")
  submissions       Submissions[]  @relation("StudentSubmissions")
}

model Groups {
  group_id      String         @id @default(uuid())
  name          String         @unique
  description   String
  course_id     String
  status        GroupStatus    @default(ACTIVE)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  group_members GroupMembers[]
  lessons       Lessons[]
  course        Course         @relation(fields: [course_id], references: [course_id])
  schedules     Schedule[]
}

model GroupMembers {
  group_members_id String   @id @default(uuid())
  group_id         String
  user_id          String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  group            Groups   @relation(fields: [group_id], references: [group_id])
  user             User     @relation(fields: [user_id], references: [user_id])
}

model Lessons {
  lesson_id      String        @id @default(uuid())
  group_id       String
  topic          String
  lesson_date    DateTime
  recording_path String
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  assignments    Assignments[]
  attendance     Attendance[]
  group          Groups        @relation(fields: [group_id], references: [group_id])
}

model Attendance {
  attendance_id String   @id @default(uuid())
  lesson_id     String
  student_id    String
  status        AttendanceStatus
  remarks       String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  lesson        Lessons  @relation(fields: [lesson_id], references: [lesson_id])
  student       User     @relation(fields: [student_id], references: [user_id])
}

model Assignments {
  assignment_id String        @id @default(uuid())
  lesson_id     String
  title         String
  description   String
  due_date      DateTime
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  lesson        Lessons       @relation(fields: [lesson_id], references: [lesson_id])
  submissions   Submissions[]
}

model Submissions {
  submission_id String      @id @default(uuid())
  assignment_id String
  student_id    String
  graded_by     String
  file_path     String
  grade         String
  graded_at     DateTime
  feedback      String
  assignment    Assignments @relation(fields: [assignment_id], references: [assignment_id])
  graded        User        @relation("GraderSubmissions", fields: [graded_by], references: [user_id])
  student       User        @relation("StudentSubmissions", fields: [student_id], references: [user_id])
}

model Course {
  course_id     String   @id @default(uuid())
  name          String   @unique
  description   String
  duration      Int
  status        CourseStatus @default(ACTIVE)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  groups        Groups[]
}

model Schedule {
  schedule_id   String   @id @default(uuid())
  group_id      String
  day_of_week   Int
  start_time    DateTime
  end_time      DateTime
  room          String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  group         Groups   @relation(fields: [group_id], references: [group_id])
}

enum UserRole {
  ADMIN
  MANAGER
  TEACHER
  STUDENT
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum GroupStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}
