generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  full_name         String?
  username          String              @unique
  password          String
  role              UserRole
  gender            Gender
  data_of_birth     DateTime
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  user_id           String              @id @default(uuid())
  group_members     GroupMembers[]
  groups            Groups[]            @relation("TeacherGroups")
  gradedSubmissions Submissions[]       @relation("GraderSubmissions")
  submissions       Submissions[]       @relation("StudentSubmissions")
  PaymentForStudent PaymentForStudent[]
  PaymentForTeacher PaymentForTeacher[]
  images            images[]
}

model Groups {
  group_id          String              @id @default(uuid())
  name              String              @unique
  description       String
  course            Course              @relation(fields: [course_id], references: [course_id])
  course_id         String
  teacher_id        String
  teacher           User                @relation("TeacherGroups", fields: [teacher_id], references: [user_id])
  status            GroupStatus         @default(ACTIVE)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  group_members     GroupMembers[]
  lessons           Lessons[]
  schedules         Schedule[]
  PaymentForStudent PaymentForStudent[]
}

model PaymentForStudent {
  payment_id String      @id @default(uuid())
  type       PaymentType
  sum        Int
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  student_id String
  student    User?       @relation(fields: [student_id], references: [user_id])
  group_id   String
  group      Groups      @relation(fields: [group_id], references: [group_id])
}

model PaymentForTeacher {
  payment_id String      @id @default(uuid())
  type       PaymentType
  sum        Int
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  teacher_id String
  teacher    User?       @relation(fields: [teacher_id], references: [user_id])
}

model images {
  image_id  String  @id @default(uuid())
  url       String
  is_worked Boolean
  user_id   String
  user      User    @relation(fields: [user_id], references: [user_id])
}

model GroupMembers {
  group_members_id String   @id @default(uuid())
  group_id         String
  user_id          String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  group            Groups   @relation(fields: [group_id], references: [group_id])
  user             User     @relation(fields: [user_id], references: [user_id])
}

model Lessons {
  lesson_id      String        @id @default(uuid())
  group_id       String
  topic          String
  lesson_date    DateTime
  recording_path String
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  group          Groups        @relation(fields: [group_id], references: [group_id])
  assignments    Assignments[]
}

model Assignments {
  assignment_id String        @id @default(uuid())
  lesson_id     String
  title         String
  description   String
  due_date      DateTime
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  lesson        Lessons       @relation(fields: [lesson_id], references: [lesson_id])
  submissions   Submissions[]
}

model Submissions {
  submission_id String      @id @default(uuid())
  assignment_id String
  student_id    String
  graded_by     String
  file_path     String
  grade         String
  graded_at     DateTime
  feedback      String
  assignment    Assignments @relation(fields: [assignment_id], references: [assignment_id])
  graded        User        @relation("GraderSubmissions", fields: [graded_by], references: [user_id])
  student       User        @relation("StudentSubmissions", fields: [student_id], references: [user_id])
}

model Course {
  course_id   String       @id @default(uuid())
  name        String       @unique
  description String
  duration    Int
  status      CourseStatus @default(ACTIVE)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  groups      Groups[]
}

model Schedule {
  schedule_id String   @id @default(uuid())
  group_id    String
  day_of_week Int
  start_time  DateTime
  end_time    DateTime
  room        String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  group       Groups   @relation(fields: [group_id], references: [group_id])
}

enum UserRole {
  ADMIN
  MANAGER
  TEACHER
  STUDENT
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum GroupStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentType {
  CASH
  CREDIT_CARD
}
